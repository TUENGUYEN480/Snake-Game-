module led_7_doan (
    
    input  logic  clk_i,      
    input  logic  reset_i,   
    input  logic	apple_colline, 
    output logic [6:0] seg_tens_o, // hang chuc
    output logic [6:0] seg_units_o // hang don vi 
);
	 logic [8:0] score;
 // BCD digits for score
    logic [3:0] bcd_tens;
    logic [3:0] bcd_units;
    logic [8:0] score_temp;
always_ff @(posedge clk_i) begin 
	if (reset_i) score <= 0 ;
		else if ( apple_colline) score <= score+1;
		else score = score;
  end 
    always_comb begin
        score_temp = score; 
        bcd_tens = 4'd0;
        
		  
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        if (score_temp >= 10) begin score_temp = score_temp - 10; bcd_tens = bcd_tens + 1; end
        // The remainder is the units digit
        bcd_units = score_temp[3:0];
    end

    // Function to map BCD digit to 7-segment pattern (common cathode)
    function automatic logic [6:0] bcd_to_7seg (input logic [3:0] bcd);
       case (bcd)
         4'h0: return 7'b1111110; // 0
         4'h1: return 7'b0110000; // 1
         4'h2: return 7'b1101101; // 2
         4'h3: return 7'b1111001; // 3
         4'h4: return 7'b0110011; // 4
         4'h5: return 7'b1011011; // 5
         4'h6: return 7'b1011111; // 6
         4'h7: return 7'b1110000; // 7
         4'h8: return 7'b1111111; // 8
         4'h9: return 7'b1111011; // 9
         default: return 7'b0000000; // Off for invalid BCD
       endcase
    endfunction

    // Assign 7-segment output signals
    assign seg_tens_o  = bcd_to_7seg(bcd_tens);
    assign seg_units_o = bcd_to_7seg(bcd_units);

    // Lưu ý: clk_i và reset_i hiện tại chưa được dùng trong logic thuần túy tổ hợp này,
    // nhưng chúng có thể cần thiết nếu bạn thêm logic phức tạp hơn như multiplexing.

endmodule